import bs4
import csv # モジュール"CSV"の呼び出し
import sys
import html

import polars as pl
from termcolor import colored

"""

Polarsでデータサイエンス100本ノックを解く（前編）
https://qiita.com/_jinta/items/28442d25bba067c13bb7

Polarsでデータサイエンス100本ノックを解く（後編）
https://qiita.com/_jinta/items/394b1682893e5991d592

データサイエンス100本ノック（構造化データ加工編）
https://github.com/The-Japan-DataScientist-Society/100knocks-preprocess
"""

#soup = bs4.BeautifulSoup(open('01_50.html'), 'html.parser')
#soup = bs4.BeautifulSoup(open('51_100.html'), 'html.parser')
#soup = bs4.BeautifulSoup(open(input_filename), 'html.parser')

input_filename = "01_50.html"
#input_filename = "51_100.html"

#PRINT = False
PRINT = True
SINGLE_TEST = False
TESTNO = ""

def help():
  print("""
  python <script_name> 50/100 
  python <script_name> 50/100 -s
  python <script_name> 50/100 -t  P-###
  """)
  sys.exit()

args = sys.argv
if len(args) >= 2:
    if args[1] == '50':
        input_filename = "01_50.html"
    elif args[1] == '100':
        input_filename = "51_100.html"
    else:
        help()
else:
    help()

if len(args) >= 3:
    if args[2] == '-s':
        PRINT = False
    elif args[2] == '-t':
        PRINT = True
        SINGLE_TEST = True
        if len(args) == 4:
           TESTNO = args[3]
        else:
           help()
    else:
      help()
ignore_list = [
               'P-057:',
               'P-058:',
               'P-068:',
               'P-069:',
               'P-072:',
               'P-073:',
               'P-075:',
               'P-076:',
               'P-085:',
               'P-086:',
               'P-088:',
               'P-089:',
               'P-090:',
               'P-091:',
               'P-094:',
               'P-095:',
               'P-096:',
               'P-097:',
               'P-098:',
               'P-099:',
               'P-100:',
        ]

stmts_list = [
               'P-039:',
               'P-043:',
               'P-044:',

               'P-059:',
               'P-060:',
               'P-081:',
               'P-082:',
               'P-083:',
               'P-084:',
               'P-085:',
               'P-087:',
               'P-088:',
               'P-089:',
               'P-090:',
               'P-091:',
               'P-092:',
        ]

dtypes = {
    'customer_id': str,
    'gender_cd': str,
    'postal_cd': str,
    'application_store_cd': str,
    'status_cd': str,
    'category_major_cd': str,
    'category_medium_cd': str,
    'category_small_cd': str,
    'product_cd': str,
    'store_cd': str,
    'prefecture_cd': str,
    'tel_no': str,
    'postal_cd': str,
    'street': str,
    'application_date': str,
    'birth_day': pl.Date
}

df_customer = pl.read_csv("../data/customer.csv", dtypes=dtypes)
df_category = pl.read_csv("../data/category.csv", dtypes=dtypes)
df_product  = pl.read_csv("../data/product.csv",  dtypes=dtypes)
df_receipt  = pl.read_csv("../data/receipt.csv",  dtypes=dtypes)
df_store    = pl.read_csv("../data/store.csv",    dtypes=dtypes)
df_geocode  = pl.read_csv("../data/geocode.csv",  dtypes=dtypes)

def p(str):
    if PRINT:
       print(str)


gv = {
      'df_receipt':  df_receipt ,
      'df_customer': df_customer,
      'df_product':  df_product,
      'df_geocode':  df_geocode,
      'pl':pl
     }

def exec_stmt(stmt):
    lv = {'ans' : "not anser"}
    exec(stmt,gv,lv)
    return lv["ans"]


def ignore(name):
    return name in ignore_list


def is_stmts(name):
    return name in stmts_list

def check_statement(name, code):
    #    print(colored("**** error statement ****","red"))
    #    print(colored("**** multi statement ****","green"))
    if ignore(name):
        print(colored("**** ignore statement ****","red"))
        return True

    elif is_stmts(name) :
        print(colored("**** multi statement ****","green"))
        t = exec_stmt(code)
        p(t)
        return True

    #if name == "P-039:" :
    #    print(colored("**** multi statement ****","green"))
    #    t = exec_stmt(code)
    #    p(t)
    #    return True

    #elif name == "P-043:" :
    #    print(colored("**** multi statement ****","green"))
    #    t = exec_stmt(code)
    #    p(t)
    #    return True

    #elif name == "P-044:" :
    #    print(colored("**** multi statement ****","green"))
    #    t = exec_stmt(code)
    #    p(t)
    #    return True

    else:
        print(".... good statement ....")
        return False



#soup = bs4.BeautifulSoup(open('01_50.html'), 'html.parser')
#soup = bs4.BeautifulSoup(open('51_100.html'), 'html.parser')
soup = bs4.BeautifulSoup(open(input_filename), 'html.parser')

links = soup.find_all('h4') # 全てのaタグ要素を取得

csvlist = [] # 配列を作成

for link in links: # aタグのテキストデータを配列に格納
    name = link.text.lstrip()
    if not name.startswith('P-'):
        continue
    print("=======================")
    #print(name+ " ", end="")
    print(name+ " ")
    #print("------------- name end")
    sample_txt = name
    csvlist.append(sample_txt)
    block = soup.select(f'h4:contains("{name}") ~ blockquote')
    html = block[0]
    b_code = bs4.BeautifulSoup(html.get_text(), 'html.parser')
    p("------------- block")
    p(b_code)
    p("------------- block end")

    div_code = soup.select(f'h4:contains("{name}") ~ div')
    if len(div_code)>0:
        html = div_code[0]

        soup_code = bs4.BeautifulSoup(html.get_text(), 'html.parser')
        if soup_code:
           p("------------- code")
           p(soup_code.text)
           p("------------- code end")
           try:
              if not check_statement(name, soup_code.text):
                  r = eval(soup_code.text)
                  p(r)
                  p("END: "+ name)
           except Exception as e:
              print("Exception:")
              print(name)
              print(e)
              sys.exit()

        #sys.exit()


'''
# CSVファイルを開く。ファイルがない場合は新規作成
f = open("output_sample.csv", "w")
writecsv = csv.writer(f, lineterminator='\n')

writecsv.writerow(csvlist) # 出力

f.close() # CSVファイルを閉じる
'''

